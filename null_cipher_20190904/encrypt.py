from pre_treat_message import pre_treat_message
import random

ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'


def encrypt(message, key):
    """ apply the null cipher, where the key tells at what index the letters of the plaintext should be hidden in each
    word* of the encrypted text. the 'words' generated by this function will be 5-letter long strings of randomly-chosen letters

    for instance here, are valid encryptions:
        - for key=0, HIGH could be encrypted as HITOW IPSLO GOPES HYTER
        - for key=2, NOON could be encrypted as TUNDE ODOWT ROOWT PUNDT
    """

    message = pre_treat_message(message) # convert to uppercase and remove punctuation

    word_substitutes = []  # store the words here

    # assemble the disguised message by going through each letter of the plaintext
    # and replacing it with a random 5-letter string that has that character in the key position

    for c in message:
        if c not in ALPHABET:  # for our implementation, we won't bother trying to encrypt values not in ALPHABET
            continue

        # which index of the 5-letter string should match the plaintext?
        index_of_plaintext = key % 5  # use the modulo operator so that we can "wrap" large keys into an index that exists in the 5-letter string

        # generate a 5-letter string that has random values for all positions except for index_of_plaintext
        word_substitute = ''
        for i in range(0,5):
            if i == index_of_plaintext:
                word_substitute += c
            else:
                # add a randomly-picked letter to word_substitute
                word_substitute += ALPHABET[random.randint(0,25)]

        word_substitutes.append(word_substitute)

    return ' '.join(word_substitutes)  # return the words as a single string, with words separated by a space

# do not modify this file beyond this point
MESSAGE = 'PIRLO'

print (encrypt(MESSAGE, 1))  # encrypt the message with a key of 1
print (encrypt(MESSAGE, 3))  # encrypt the message with a key of 3

